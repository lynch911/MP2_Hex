#include "stdafx.h"
#include "HexAgent.h"
#include <queue>
#include "iostream"
#include <string>
#include <vector>


HexAgent::HexAgent(int Size, bool isOffensive)
{
	GameSize = Size;
	Offensive = isOffensive;
	MyLastMove = new lynch::Position; MyLastMove->X = -1; MyLastMove->Y = -1;
	OpLastMove = new lynch::Position; OpLastMove->X = -1; OpLastMove->Y = -1;
	TouchDown1 = false;
	TouchDown2 = false;
	Checkboard = new std::map<int, bool>;
	Checkboard2 = new std::map<int, bool>;
	Chessboard = new std::map<int, lynch::PosInfo>;
	for (int j = 0; j < Size; j++) {
		for (int i = 0; i < Size; i++) {
			lynch::PosInfo PosI; PosI.Occupation = 0; PosI.PosX = i; PosI.PosY = j;
			PosI.MyDistance[0] = 9999999; PosI.OpDistance[0] = 9999999; PosI.MyDistance[1] = 9999999; PosI.OpDistance[1] = 9999999;
			PosI.Key = EncodePos(i, j);
			if (i == 0 || j == 0 || i == Size - 1 || j == Size - 1) {
				if ((i == 0 || i == Size - 1) && (j == 0 || j == Size - 1)) {
					if ((i == 0 && j == 0) || (i == Size - 1 && j == Size - 1)) {
						PosI.Neighbors = new std::vector<lynch::PosInfo *>(2);//角点有2个邻居
					}
					else {
						PosI.Neighbors = new std::vector<lynch::PosInfo *>(3);//角点有3个邻居
					}
				}
				else {
					PosI.Neighbors = new std::vector<lynch::PosInfo *>(4);//边缘点有4个邻居
				}
			}
			else {
				PosI.Neighbors = new std::vector<lynch::PosInfo *>(6);//在中部的点位有6个邻居
			}
			Chessboard->insert(std::make_pair(EncodePos(i, j), PosI));
			Checkboard->insert(std::make_pair(EncodePos(i, j), false));
			Checkboard2->insert(std::make_pair(EncodePos(i, j), false));
		}
	}
	std::map<int, lynch::PosInfo>::iterator iter1;
	std::map<int, lynch::PosInfo>::iterator iter2;
	lynch::PosInfo *Tag;
	lynch::Position tempP;
	for (iter1 = Chessboard->begin(); iter1 != Chessboard->end(); iter1++) {
		tempP = DecodePos(iter1->first);
		int i = tempP.X; int j = tempP.Y;
		if (i == 0 || j == 0 || i == Size - 1 || j == Size - 1) {
			if ((i == 0 || i == Size - 1) && (j == 0 || j == Size - 1)) {
				//边缘点有2个邻居
				if (i == 0 && j == 0) {
					Tag = &Chessboard->at(EncodePos(i + 1, j)); iter1->second.Neighbors->at(0) = Tag;
					Tag = &Chessboard->at(EncodePos(i, j + 1)); iter1->second.Neighbors->at(1) = Tag;
				}
				else if (i == 0 && j == Size - 1) {
					Tag = &Chessboard->at(EncodePos(i, j - 1)); iter1->second.Neighbors->at(0) = Tag;
					Tag = &Chessboard->at(EncodePos(i + 1, j - 1)); iter1->second.Neighbors->at(1) = Tag;
					Tag = &Chessboard->at(EncodePos(i + 1, j)); iter1->second.Neighbors->at(2) = Tag;
				}
				else if (i == Size - 1 && j == 0) {
					Tag = &Chessboard->at(EncodePos(i, j + 1)); iter1->second.Neighbors->at(0) = Tag;
					Tag = &Chessboard->at(EncodePos(i - 1, j + 1)); iter1->second.Neighbors->at(1) = Tag;
					Tag = &Chessboard->at(EncodePos(i - 1, j)); iter1->second.Neighbors->at(2) = Tag;
				}
				else {
					Tag = &Chessboard->at(EncodePos(i, j - 1)); iter1->second.Neighbors->at(0) = Tag;
					Tag = &Chessboard->at(EncodePos(i - 1, j)); iter1->second.Neighbors->at(1) = Tag;
				}
			}
			else {
				//边缘点有4个邻居
				if (i == 0) {
					Tag = &Chessboard->at(EncodePos(i, j - 1)); iter1->second.Neighbors->at(0) = Tag;
					Tag = &Chessboard->at(EncodePos(i + 1, j - 1)); iter1->second.Neighbors->at(1) = Tag;
					Tag = &Chessboard->at(EncodePos(i + 1, j)); iter1->second.Neighbors->at(2) = Tag;
					Tag = &Chessboard->at(EncodePos(i, j + 1)); iter1->second.Neighbors->at(3) = Tag;
				}
				else if (i == Size - 1) {
					Tag = &Chessboard->at(EncodePos(i, j - 1)); iter1->second.Neighbors->at(0) = Tag;
					Tag = &Chessboard->at(EncodePos(i, j + 1)); iter1->second.Neighbors->at(1) = Tag;
					Tag = &Chessboard->at(EncodePos(i - 1, j + 1)); iter1->second.Neighbors->at(2) = Tag;
					Tag = &Chessboard->at(EncodePos(i - 1, j)); iter1->second.Neighbors->at(3) = Tag;
				}
				else if (j == 0) {
					Tag = &Chessboard->at(EncodePos(i + 1, j)); iter1->second.Neighbors->at(0) = Tag;
					Tag = &Chessboard->at(EncodePos(i, j + 1)); iter1->second.Neighbors->at(1) = Tag;
					Tag = &Chessboard->at(EncodePos(i - 1, j + 1)); iter1->second.Neighbors->at(2) = Tag;
					Tag = &Chessboard->at(EncodePos(i - 1, j)); iter1->second.Neighbors->at(3) = Tag;
				}
				else {
					Tag = &Chessboard->at(EncodePos(i, j - 1)); iter1->second.Neighbors->at(0) = Tag;
					Tag = &Chessboard->at(EncodePos(i + 1, j - 1)); iter1->second.Neighbors->at(1) = Tag;
					Tag = &Chessboard->at(EncodePos(i + 1, j)); iter1->second.Neighbors->at(2) = Tag;
					Tag = &Chessboard->at(EncodePos(i - 1, j)); iter1->second.Neighbors->at(3) = Tag;
				}
			}
		}
		else {
			//在中部的点位有6个邻居
			Tag = &Chessboard->at(EncodePos(i, j - 1)); iter1->second.Neighbors->at(0) = Tag;
			Tag = &Chessboard->at(EncodePos(i + 1, j - 1)); iter1->second.Neighbors->at(1) = Tag;
			Tag = &Chessboard->at(EncodePos(i + 1, j)); iter1->second.Neighbors->at(2) = Tag;
			Tag = &Chessboard->at(EncodePos(i, j + 1)); iter1->second.Neighbors->at(3) = Tag;
			Tag = &Chessboard->at(EncodePos(i - 1, j + 1)); iter1->second.Neighbors->at(4) = Tag;
			Tag = &Chessboard->at(EncodePos(i - 1, j)); iter1->second.Neighbors->at(5) = Tag;
		}
	}
}

HexAgent::~HexAgent()
{
	if (Chessboard)
		delete Chessboard;
	if (Checkboard)
		delete Checkboard;
	if (MyLastMove)
		delete MyLastMove;
	if (OpLastMove)
		delete OpLastMove;
}

int HexAgent::EncodePos(int x, int y)
{
	return (y * GameSize + x);
}

lynch::Position HexAgent::DecodePos(int code)
{
	lynch::Position Pos;
	Pos.X = code % GameSize;
	Pos.Y = (code - Pos.X) / GameSize;
	return Pos;
}

void HexAgent::BoardReset(std::map<int, bool> * tag)
{
	std::map<int, bool>::iterator iter;
	for (iter = tag->begin(); iter != tag->end(); iter++) {
		iter->second = false;
	}
}

int HexAgent::DetectNeighbor(int Partner, int NeighborKeyValue, bool & isBlocked, int & Last1, int & Last2)
{
	if (Chessboard->at(NeighborKeyValue).Occupation == 0) {
		if (Checkboard2->at(NeighborKeyValue) == false) {
			Checkboard2->at(NeighborKeyValue) = true;
			isBlocked = false;
			if (Chessboard->at(NeighborKeyValue).MyDistance[0] < Last1) {
				Last2 = Last1;
				Last1 = Chessboard->at(NeighborKeyValue).MyDistance[0];
			}
			else {
				if (Chessboard->at(NeighborKeyValue).MyDistance[0] < Last2)
					Last2 = Chessboard->at(NeighborKeyValue).MyDistance[0];
			}
		}
	}
	else if (Chessboard->at(NeighborKeyValue).Occupation == Partner) {//如果连接有己方落子
		lynch::PosInfo *FloatPointer = &(Chessboard->at(NeighborKeyValue));
		std::vector<lynch::PosInfo*> temp;
		while (true) {
			for (int m = 0; m < FloatPointer->Neighbors->size(); m++) {
				if (Checkboard2->at(FloatPointer->Neighbors->at(m)->Key) == false) {//没有检查过才继续
					Checkboard2->at(FloatPointer->Neighbors->at(m)->Key) = true;
					if (FloatPointer->Neighbors->at(m)->Occupation == 0) {
						isBlocked = false;
						if (FloatPointer->Neighbors->at(m)->MyDistance[0] < Last1) {
							Last2 = Last1;
							Last1 = FloatPointer->Neighbors->at(m)->MyDistance[0];
						}
						else {
							if (FloatPointer->Neighbors->at(m)->MyDistance[0] < Last2)
								Last2 = FloatPointer->Neighbors->at(m)->MyDistance[0];
						}
					}
					else if (FloatPointer->Neighbors->at(m)->Occupation == Partner) {//
						if (FloatPointer->Neighbors->at(m)->MyDistance[0] == 0) {
							return 1;
							/*BoardPointer->MyDistance[0] = 1;
							(*CheckPointer) = true;
							goto pin1;*/
						}
						else
							temp.push_back(FloatPointer->Neighbors->at(m));
					}
				}
			}
			if (temp.size() == 0)
				break;
			else {
				FloatPointer = temp.at(temp.size() - 1);
				temp.pop_back();
			}
		}
	}
	return 0;
}

lynch::PosInfo* HexAgent::Find(char letter, int y)
{
	int x = ChartoInt(letter);
	return &(Chessboard->at(EncodePos(x, y)));
}

void HexAgent::Receive(std::string des, int i)
{
	int y = ChartoInt(des.c_str()[0]);
	int x = stoi(des.substr(1));
	
	Chessboard->at(EncodePos(x, y)).Occupation = i;
	if (TouchDown1 == false) {
		if (y == 0)TouchDown1 = true;
	}
	if (TouchDown2 == false) {
		if (y == GameSize - 1) TouchDown2 = true;
	}
	//更新上一步的落子
	if (i == 2) {
		OpLastMove->X = x;
		OpLastMove->Y = y;
	}
	else {
		MyLastMove->X = x;
		OpLastMove->Y = y;
	}
}

std::string HexAgent::Output()
{
	lynch::Position Pos;
	std::string str;
	return str;
}

void HexAgent::ShowNeighbors(char letter, int y)
{
	lynch::PosInfo* PosI = Find(letter, y);
	for (int i = 0; i < PosI->Neighbors->size(); i++) {
		std::cout << InttoChar(PosI->Neighbors->at(i)->PosY) << "," << PosI->Neighbors->at(i)->PosX << ":" << PosI->Neighbors->at(i)->Occupation << std::endl;
	}
}

void HexAgent::ShowOpLastMove()
{
	std::cout << InttoChar(OpLastMove->Y) << "," << OpLastMove->X << std::endl;
}

std::map<int, bool>* HexAgent::ShowCheckboard()
{
	return Checkboard;
}

int HexAgent::ChartoInt(char letter)
{
	return (int)letter - 65;
}

char HexAgent::InttoChar(int code)
{
	return (char)(code + 65);
}

double HexAgent::ValueFunction()
{
	return 0.0;
}

void HexAgent::MinMaxTreeSearch()
{
	double Alpha, Beta;
	//
}

void HexAgent::DoubleDistance()
{
	//先算自己的（默认红棋）
	bool FLAG = false;
	bool *CheckPointer;
	lynch::PosInfo *BoardPointer;//指向目前要计算的点位
	int	LimitedMax = 0;
	while (!FLAG) {
		FLAG = true;
		LimitedMax++;
		for (int i = 0; i < GameSize; i++) {
			for (int j = 0; j < GameSize; j++) {
				int KeyValue = EncodePos(i, j);
				CheckPointer = &(Checkboard->at(KeyValue));
				BoardPointer = &(Chessboard->at(KeyValue));
				if ((*CheckPointer) == false) {//当该点还没有双距离值时
					FLAG = false;//如果有一个点没有双距离则再循环一次
					if (Chessboard->at(KeyValue).Occupation != 0)
						(*CheckPointer) = true;//已有落子的情况，应有记录
					else {//在空格的情况下计算双距离
						if (BoardPointer->PosX == 0) {
							BoardPointer->MyDistance[0] = 1;//左边缘直接为1
							(*CheckPointer) = true;
						}
						else {//不是左边缘
							bool isBlocked = true;
							int Last1 = 9999999;
							int Last2 = 9999999;
							if (BoardPointer->PosX == GameSize - 1) {//在右边缘
								for (int t = 0; t < GameSize; t++) {
									int BoarderKeyValue = EncodePos(GameSize - 1, t);//右边缘的key
									//---
									int Result = DetectNeighbor(1, BoarderKeyValue, isBlocked, Last1, Last2);
									if (Result == 1) {
										BoardPointer->MyDistance[0] = 1;
										(*CheckPointer) = true;
										goto pin1;
									}
									//---
									//if (Chessboard->at(BoarderKeyValue).Occupation == 0) {
									//	if (Checkboard2->at(BoarderKeyValue) == false) {
									//		Checkboard2->at(BoarderKeyValue) = true;
									//		isBlocked = false;
									//		if (Chessboard->at(BoarderKeyValue).MyDistance[0] < Last1) {
									//			Last2 = Last1;
									//			Last1 = Chessboard->at(BoarderKeyValue).MyDistance[0];
									//		}
									//		else {
									//			if (Chessboard->at(BoarderKeyValue).MyDistance[0] < Last2)
									//				Last2 = Chessboard->at(BoarderKeyValue).MyDistance[0];
									//		}
									//	}
									//}
									//else if (Chessboard->at(BoarderKeyValue).Occupation == 1) {//如果连接有己方落子
									//	lynch::PosInfo *FloatPointer = &(Chessboard->at(BoarderKeyValue));
									//	std::vector<lynch::PosInfo*> temp;
									//	while (true) {
									//		for (int m = 0; m < FloatPointer->Neighbors->size(); m++) {
									//			if (Checkboard2->at(FloatPointer->Neighbors->at(m)->Key) == false) {//没有检查过才继续
									//				Checkboard2->at(FloatPointer->Neighbors->at(m)->Key) = true;
									//				if (FloatPointer->Neighbors->at(m)->Occupation == 0) {
									//					isBlocked = false;
									//					if (FloatPointer->Neighbors->at(m)->MyDistance[0] < Last1) {
									//						Last2 = Last1;
									//						Last1 = FloatPointer->Neighbors->at(m)->MyDistance[0];
									//					}
									//					else {
									//						if (FloatPointer->Neighbors->at(m)->MyDistance[0] < Last2)
									//							Last2 = FloatPointer->Neighbors->at(m)->MyDistance[0];
									//					}
									//				}
									//				else if (FloatPointer->Neighbors->at(m)->Occupation == 1) {//
									//					if (FloatPointer->Neighbors->at(m)->MyDistance[0] == 0) {
									//						BoardPointer->MyDistance[0] = 1;
									//						(*CheckPointer) = true;
									//						goto pin1;
									//					}
									//					else
									//						temp.push_back(FloatPointer->Neighbors->at(m));
									//				}
									//			}
									//		}
									//		if (temp.size() == 0)
									//			break;
									//		else {
									//			FloatPointer = temp.at(temp.size() - 1);
									//			temp.pop_back();										
									//		}
									//	}
									//}
								}
							}
							for (int k = 0; k < BoardPointer->Neighbors->size(); k++) {
								//---
								int Result = DetectNeighbor(1, BoardPointer->Neighbors->at(k)->Key, isBlocked, Last1, Last2);
								if (Result == 1) {
									BoardPointer->MyDistance[0] = 1;
									(*CheckPointer) = true;
									goto pin1;
								}
								//---
								//if (Checkboard2->at(BoardPointer->Neighbors->at(k)->Key) == false) {
								//	Checkboard2->at(BoardPointer->Neighbors->at(k)->Key) = true;
								//	if (BoardPointer->Neighbors->at(k)->Occupation == 0) {//邻居没有落子
								//		isBlocked = false;//邻居没有落子说明没有Blocked
								//		if (BoardPointer->Neighbors->at(k)->MyDistance[0] < Last1) {
								//			Last2 = Last1;
								//			Last1 = BoardPointer->Neighbors->at(k)->MyDistance[0];
								//		}
								//		else {
								//			if (BoardPointer->Neighbors->at(k)->MyDistance[0] < Last2)
								//				Last2 = BoardPointer->Neighbors->at(k)->MyDistance[0];
								//		}
								//	}
								//	else if (BoardPointer->Neighbors->at(k)->Occupation == 1) {
								//		lynch::PosInfo *FloatPointer = BoardPointer->Neighbors->at(k);
								//		std::vector<lynch::PosInfo*> temp;
								//		while (true) {
								//			for (int m = 0; m < FloatPointer->Neighbors->size(); m++) {
								//				if (Checkboard2->at(FloatPointer->Neighbors->at(m)->Key) == false) {//没有检查过才继续
								//					Checkboard2->at(FloatPointer->Neighbors->at(m)->Key) = true;
								//					if (FloatPointer->Neighbors->at(m)->Occupation == 0) {
								//						isBlocked = false;
								//						if (FloatPointer->Neighbors->at(m)->MyDistance[0] < Last1) {
								//							Last2 = Last1;
								//							Last1 = FloatPointer->Neighbors->at(m)->MyDistance[0];
								//						}
								//						else {
								//							if (FloatPointer->Neighbors->at(m)->MyDistance[0] < Last2)
								//								Last2 = FloatPointer->Neighbors->at(m)->MyDistance[0];
								//						}
								//					}
								//					else if (FloatPointer->Neighbors->at(m)->Occupation == 1) {//
								//						if (FloatPointer->Neighbors->at(m)->MyDistance[0] == 0) {
								//							BoardPointer->MyDistance[0] = 1;
								//							(*CheckPointer) = true;
								//							goto pin1;
								//						}
								//						else
								//							temp.push_back(FloatPointer->Neighbors->at(m));
								//					}
								//				}
								//			}
								//			if (temp.size() == 0)
								//				break;
								//			else {
								//				FloatPointer = temp.at(temp.size() - 1);
								//				temp.pop_back();
								//			}
								//		}
								//	}
								//}
							}
							if (isBlocked) {
								BoardPointer->MyDistance[0] = 9999999;
								(*CheckPointer) = true;
							}
							else {
								if (Last2 == LimitedMax - 1) {
									BoardPointer->MyDistance[0] = LimitedMax;
									(*CheckPointer) = true;
								}
							}
						}
					pin1:
						BoardReset(Checkboard2);
					}
				}
			}
		}
	}
}
